============================= test session starts ==============================
platform linux -- Python 3.7.6, pytest-5.3.2, py-1.8.0, pluggy-0.13.1
rootdir: /github/workspace
plugins: cov-2.8.1
collected 7 items

testing/test_4_1.py .                                                    [ 14%]
testing/test_5_1.py .                                                    [ 28%]
testing/test_5_6.py .                                                    [ 42%]
testing/test_6_1.py .                                                    [ 57%]
testing/test_7_1.py .                                                    [ 71%]
testing/test_8_1.py .                                                    [ 85%]
testing/test_9_1.py F                                                    [100%]

=================================== FAILURES ===================================
_____________________________________ test _____________________________________

    def test():
        test_data = read_tsv("9_1.tsv", test_schema)
        for test in test_data:
>           tree = bt.tree_from_list(test.test)

testing/test_9_1.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = [-6, -2, 0, None, 8, 6, ...]

    def tree_from_list(l: list) -> BinaryTreeNode:
        """
        Given a list in breadth-first format for a tree create the tree and return the root
    
        Args:
            l: the list described
    
        Returns:
            root node of the tree described
        """
        # we will build the tree from the leaves up
    
        # given an empty list just return nothing
        if not l:
            return None
        # a simple calculation tells us how deep the tree will be
        height = height_from_list(l)
        # we pad the given list to the number of nodes that would be in a perfect tree
        l += [None] * (2 ** height - 1 - len(l))
        # starting at the leaves i.e. layer height
        i = height
        curr = None
        # we will go until we reach the root
        while i > 0:
            # get the values of the current layer
            layer = l[2 ** (i - 1) - 1 : 2 ** i - 1]
            # make them tree nodes
            layer = [BinaryTreeNode(v) if not v is None else None for v in layer]
            if not curr:
                # if we are at the greatest depth i.e. the leaves we have nothing to hookup
                # so we set current layer to leave and continue looping
                curr = layer
            else:
                # a incrementor will keep track of which child we're connecting
                l_or_r = 0
                for n, node in enumerate(curr):
                    # get the parent node
                    temp = layer[n // 2]
>                   assert not (temp is None and not node is None)
E                   AssertionError

problems/utils/binary_tree.py:78: AssertionError

----------- coverage: platform linux, python 3.7.6-final-0 -----------
Name                             Stmts   Miss  Cover
----------------------------------------------------
problems/_4_1/sol.py                29      0   100%
problems/_5_1/sol.py                51      0   100%
problems/_5_6/sol.py                11      0   100%
problems/_6_1/sol.py                34     11    68%
problems/_7_1/sol.py                28      0   100%
problems/_8_1/sol.py                26      3    88%
problems/_9_1/sol.py                17      3    82%
problems/__init__.py                 0      0   100%
problems/utils/__init__.py           0      0   100%
problems/utils/binary_tree.py       54     14    74%
problems/utils/linked_list.py       81     15    81%
testing/__init__.py                  3      0   100%
testing/test_4_1.py                 11      0   100%
testing/test_5_1.py                 12      0   100%
testing/test_5_6.py                 13      0   100%
testing/test_6_1.py                 12      0   100%
testing/test_7_1.py                 14      0   100%
testing/test_8_1.py                 23      2    91%
testing/test_9_1.py                 15      0   100%
testing/test_utils/__init__.py       0      0   100%
testing/test_utils/read_tsv.py      18      0   100%
----------------------------------------------------
TOTAL                              452     48    89%

=================== 1 failed, 6 passed in 297.09s (0:04:57) ====================
